{"version":3,"sources":["redux/selectors/auth.selectors.tsx","redux/selectors/user.selectors.tsx","redux/selectors/todos.selectors.tsx","redux/selectors/photos.selectors.tsx","redux/api/auth.api.tsx","redux/api/todos.api.tsx","redux/api/photos.api.tsx","components/Dashboard/Sidebar/index.tsx","components/Dashboard/Content/Photos/index.tsx","components/Dashboard/Content/Todos/index.tsx","components/Dashboard/Content/index.tsx","components/Dashboard/Header/index.tsx","containers/DashboardPage/Dashboard.tsx","containers/DashboardPage/index.tsx","routes/todos.route.tsx"],"names":["selectSignInStarted","state","auth","signInStarted","selectSignInFailed","signInFailed","selectSignInErrorMessage","signInErrorMessage","selectSignUpStarted","signUpStarted","selectSignUpFailed","signUpFailed","selectSignUpErrorMessage","signUpErrorMessage","selectUser","user","selectTodosList","todos","list","selectTodosFetchStarted","fetchStarted","selectTodosFetchSuccess","fetchSuccess","selectPhotosList","photos","selectPhotosFetchStarted","selectPhotosFetchSuccess","login","email","password","dispatch","a","authActions","signIn","userActions","storeUserData","firstName","lastName","signInSuccess","message","register","signUp","signUpSuccess","logout","signOut","removeUserData","fetchTodos","limit","todosActions","axios","get","res","data","fetchFailed","fetchPhotos","photosActions","Sidebar","section","Drawer","variant","sx","width","flexShrink","boxSizing","Toolbar","Box","overflow","List","ListItem","selected","button","component","Link","to","ListItemIcon","ListItemText","primary","Posts","useDispatch","useSelector","photosList","useEffect","Grid","container","spacing","map","photo","item","xs","sm","md","lg","display","justifyContent","src","thumbnailUrl","alt","title","id","Array","el","index","Skeleton","height","Todos","todosList","maxWidth","todo","ListItemAvatar","Avatar","backgroundColor","completed","green","red","Content","flexGrow","p","Photos","Dashboard","loading","userData","fnLogout","AppBar","position","zIndex","theme","drawer","alignItems","Typography","noWrap","marginRight","style","marginBottom","Stack","Button","onClick","CssBaseline","Header","DashboardPage","useAuthState","fetchUserData","history","push","getUser","uid","console","error","TodosRoute"],"mappings":"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","file":"static/js/10.dbd7e07b.chunk.js","sourcesContent":["import { TState } from \"../state\"\n\nexport const selectSignInStarted = (state: TState) => state.auth.signInStarted\nexport const selectSignInSuccess = (state: TState) => state.auth.signInSuccess\nexport const selectSignInFailed = (state: TState) => state.auth.signInFailed\nexport const selectSignInErrorMessage = (state: TState) => state.auth.signInErrorMessage\nexport const selectSignUpStarted = (state: TState) => state.auth.signUpStarted\nexport const selectSignUpSuccess = (state: TState) => state.auth.signUpSuccess\nexport const selectSignUpFailed = (state: TState) => state.auth.signUpFailed\nexport const selectSignUpErrorMessage = (state: TState) => state.auth.signUpErrorMessage","import { TState } from \"../state\"\n\nexport const selectUser = (state: TState) => state.user","import { TState } from \"../state\"\n\nexport const selectTodosList = (state: TState) => state.todos.list\nexport const selectTodosFetchStarted = (state: TState) => state.todos.fetchStarted\nexport const selectTodosFetchSuccess = (state: TState) => state.todos.fetchSuccess\nexport const selectTodosFetchFailed = (state: TState) => state.todos.fetchFailed","import { TState } from \"../state\"\n\nexport const selectPhotosList = (state: TState) => state.photos.list\nexport const selectPhotosFetchStarted = (state: TState) => state.photos.fetchStarted\nexport const selectPhotosFetchSuccess = (state: TState) => state.photos.fetchSuccess\nexport const selectPhotosFetchFailed = (state: TState) => state.photos.fetchFailed","import { Dispatch } from 'react';\nimport { signIn, signUp, signOut } from '../../database'\nimport { ValueOf } from '../../utils/helper/typesGenerics';\nimport { IStoreUserDataPayload, TActionTypes as TUserActionTypes } from '../actions/user.actionTypes';\nimport { TActionTypes as TAuthActionTypes } from '../actions/auth.actionTypes';\nimport { auth as authActions, user as userActions } from '../actions'\n\ntype IDispatchObj = {\n  type: ValueOf<TAuthActionTypes>,\n  payload?: string,\n} | {\n  type: ValueOf<TUserActionTypes>,\n  payload?: IStoreUserDataPayload,  \n}\n\nexport const login = (email: string, password: string) => async (dispatch: Dispatch<IDispatchObj>) => {\n  dispatch(authActions.signInStarted())\n  try {\n    const user: any = await signIn(email, password)\n    if(user) {\n      dispatch(userActions.storeUserData({\n        email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n      }))\n      dispatch(authActions.signInSuccess());\n    }\n  } catch (err: any) {\n    const message = err?.message\n    dispatch(authActions.signInFailed(message));\n  }\n};\n\nexport const register = (firstName: string, lastName: string, email: string, password: string) => async (dispatch: Dispatch<IDispatchObj>) => {\n  dispatch(authActions.signUpStarted())\n  try {\n    const user: any = await signUp(firstName, lastName, email, password)\n    if(user) {\n      dispatch(userActions.storeUserData({\n        email,\n        firstName,\n        lastName,\n      }))\n      dispatch(authActions.signUpSuccess());\n    }\n  } catch (err: any) {\n    const message = err?.message\n    dispatch(authActions.signUpFailed(message));\n  }\n};\n\nexport const logout = () => async (dispatch: Dispatch<IDispatchObj>) => {\n  await signOut()\n  dispatch(userActions.removeUserData())\n  dispatch(authActions.signOut())\n}","import { Dispatch } from 'react';\nimport axios from '../../utils/helper/axios'\nimport { ValueOf } from '../../utils/helper/typesGenerics';\nimport { TTodosList } from '../state'\nimport { TActionTypes } from '../actions/todos.actionTypes'\nimport { todos as todosActions } from '../actions'\n\ntype IDispatchObj = {\n  type: ValueOf<TActionTypes>,\n  payload?: TTodosList,\n}\n\nexport const fetchTodos = (limit: number = 50) => async (dispatch: Dispatch<IDispatchObj>) => {\n  dispatch(todosActions.fetchStarted())\n  try {\n    const res = await axios.get('todos?_limit='+limit)\n    const data = res.data\n    dispatch(todosActions.fetchSuccess(data))\n  } catch(e) {\n    dispatch(todosActions.fetchFailed())\n  }\n}","import { Dispatch } from 'react';\nimport axios from '../../utils/helper/axios'\nimport { ValueOf } from '../../utils/helper/typesGenerics';\nimport { TPhotosList } from '../state'\nimport { TActionTypes } from '../actions/photos.actionTypes'\nimport { photos as photosActions } from '../actions'\n\ntype IDispatchObj = {\n  type: ValueOf<TActionTypes>,\n  payload?: TPhotosList,\n}\n\nexport const fetchPhotos = (limit: number = 50) => async (dispatch: Dispatch<IDispatchObj>) => {\n  dispatch(photosActions.fetchStarted())\n  try {\n    const res = await axios.get('photos?_limit='+limit)\n    const data = res.data\n    dispatch(photosActions.fetchSuccess(data))\n  } catch(e) {\n    dispatch(photosActions.fetchFailed())\n  }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { \n  Drawer, Box, Toolbar,\n  List, ListItem, ListItemIcon, ListItemText,\n} from '@mui/material';\nimport TaskIcon from '@mui/icons-material/Task';\nimport PhotoLibraryIcon from '@mui/icons-material/PhotoLibrary';\n\nimport { TSection } from '../../../containers/DashboardPage'\n\ninterface IProps {\n  section: TSection\n}\n\nconst drawerWidth = 200;\n\nconst Sidebar = ({ section }: IProps) => {\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      sx={{\n        width: drawerWidth,\n        flexShrink: 0,\n        [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },\n      }}\n    >\n      <Toolbar />\n      <Box sx={{ overflow: 'auto' }}>\n        <List>\n          <ListItem selected={section === 'todos'} button key='todos' component={Link} to='/'>\n            <ListItemIcon>\n              <TaskIcon />\n            </ListItemIcon>\n            <ListItemText primary='Todos' />\n          </ListItem>\n          <ListItem selected={section === 'photos'} button key='photos' component={Link} to='/photos'>\n            <ListItemIcon>\n              <PhotoLibraryIcon />\n            </ListItemIcon>\n            <ListItemText primary='Album' />\n          </ListItem>\n        </List>\n      </Box>\n    </Drawer>\n  );\n}\n\nexport default Sidebar;","import React, { useEffect } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPhotos } from '../../../../redux/api';\nimport { selectPhotosFetchStarted, selectPhotosFetchSuccess, selectPhotosList } from '../../../../redux/selectors';\nimport { Grid, Skeleton } from '@mui/material';\n\nconst limit = 24\n\nconst Posts = () => {\n\n  const dispatch = useDispatch();\n  const fetchSuccess = useSelector(selectPhotosFetchSuccess)\n  const fetchStarted = useSelector(selectPhotosFetchStarted)\n  const photosList = useSelector(selectPhotosList)\n\n  useEffect(() => {\n    if(!fetchSuccess) {\n      dispatch(fetchPhotos(limit))\n    }\n  }, [dispatch, fetchSuccess])\n  \n  return (\n    <Grid container spacing={2}>\n      {\n        fetchSuccess && photosList.map(photo => (\n          <Grid key={photo.id} item xs={12} sm={6} md={4} lg={3} display=\"flex\" justifyContent=\"center\">\n            <img src={photo.thumbnailUrl} alt={photo.title} />\n          </Grid>\n        ))\n      }\n      {\n        fetchStarted && [...new Array(limit)].map((el, index) => (\n          <Grid key={index} item xs={12} sm={6} md={4} lg={3} display=\"flex\" justifyContent=\"center\">\n            <Skeleton variant=\"rectangular\" width={150} height={150} />\n          </Grid>\n        ))\n      }\n    </Grid>\n  )\n}\n\nexport default Posts","import React, { useEffect } from 'react'\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport AssignmentLateIcon from '@mui/icons-material/AssignmentLate';\nimport AssignmentTurnedInIcon from '@mui/icons-material/AssignmentTurnedIn';\nimport { green, red } from '@mui/material/colors';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTodos } from '../../../../redux/api';\nimport { selectTodosFetchStarted, selectTodosFetchSuccess, selectTodosList } from '../../../../redux/selectors';\nimport { Skeleton } from '@mui/material';\n\nconst limit = 20\n\nconst Todos = () => {\n\n  const dispatch = useDispatch();\n  const fetchSuccess = useSelector(selectTodosFetchSuccess)\n  const fetchStarted = useSelector(selectTodosFetchStarted)\n  const todosList = useSelector(selectTodosList)\n\n  useEffect(() => {\n    if(!fetchSuccess) {\n      dispatch(fetchTodos(limit))\n    }\n  }, [dispatch, fetchSuccess])\n  \n  return (\n    <List sx={{ width: '100%', maxWidth: 600 }}>\n      {\n        fetchSuccess && todosList.map(todo => (\n          <ListItem key={todo.id}>\n            <ListItemAvatar>\n              <Avatar sx={{ backgroundColor: todo.completed ? green[500] : red[500] }}>\n                { todo.completed ? <AssignmentTurnedInIcon /> : <AssignmentLateIcon /> }\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={todo.title} />\n          </ListItem>\n        ))\n      }\n      {\n        fetchStarted && [...new Array(limit)].map((el, index) => (\n          <ListItem key={index}>\n            <ListItemAvatar>\n              <Skeleton variant=\"circular\" width={40} height={40} />\n            </ListItemAvatar>\n            <Skeleton variant=\"rectangular\" width={500} height={30} />\n          </ListItem>\n        ))\n      }\n    </List>\n  )\n}\n\nexport default Todos","import React from \"react\";\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\n\nimport Photos from './Photos'\nimport Todos from './Todos'\nimport { TSection } from '../../../containers/DashboardPage'\n\ninterface IProps {\n  section: TSection\n}\n\nconst Content = ({ section }: IProps) => {\n\n  return (\n    <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n      <Toolbar />\n      {\n        section === 'todos' ? (\n          <Todos />\n        ) : (\n          <Photos />\n        )\n      }\n    </Box>\n  );\n}\n\nexport default Content;","import React from \"react\";\nimport { AppBar, Toolbar, Box, Typography, Skeleton, Stack, Button } from \"@mui/material\";\n\nimport { TUserState } from '../../../redux/state/user.state';\n\ninterface IProps {\n  loading: boolean,\n  userData: TUserState,\n  fnLogout: () => void,\n}\n\nconst Dashboard = ({ loading = false, userData = null, fnLogout }: IProps) => {\n\n  return (\n    <AppBar position=\"fixed\" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>\n      <Toolbar>\n        <Box display='flex' justifyContent='space-between' alignItems='center' width='100%'>\n          <Typography variant=\"h4\" noWrap component=\"div\">\n            Dashboard\n          </Typography>\n          <Box display='flex'>\n            <Box marginRight='2rem'>\n              {\n                loading || !userData ?\n                (\n                  <>\n                    <Skeleton height={24} width={200} style={{ marginBottom: 6, backgroundColor: 'rgba(255,255,255,.5)' }} />\n                    <Skeleton height={24} width={200} style={{ backgroundColor: 'rgba(255,255,255,.5)' }}/>\n                  </>\n                ) :\n                (\n                  <>\n                    <Typography variant='body1'>{userData?.email}</Typography>\n                    <Typography variant='body1'>{`${userData?.firstName} ${userData?.lastName}`}</Typography>\n                  </>\n                )\n              }\n            </Box>\n            <Stack spacing={2} justifyContent='center'>\n              <Button variant=\"contained\" onClick={fnLogout}>Logout</Button>\n            </Stack>\n          </Box>        \n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n}\nexport default Dashboard;","import React from \"react\";\nimport { CssBaseline, Box } from '@mui/material';\n\nimport { TUserState } from '../../redux/state/user.state';\nimport Sidebar from \"../../components/Dashboard/Sidebar\";\nimport Content from \"../../components/Dashboard/Content\";\nimport Header from \"../../components/Dashboard/Header\";\nimport { TSection } from './index'\n\ninterface IProps {\n  section: TSection,\n  loading: boolean,\n  userData: TUserState,\n  fnLogout: () => void,\n}\n\nconst Dashboard = ({ section, loading, userData, fnLogout }: IProps) => {\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <Header loading={loading} userData={userData} fnLogout={fnLogout} />\n      <Sidebar section={section} />\n      <Content section={section} />\n    </Box>\n  );\n}\n\nexport default Dashboard;","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\n\nimport { auth, getUser } from \"../../database\";\nimport { logout } from '../../redux/api'\nimport { storeUserData } from \"../../redux/actions/user.actions\";\nimport { selectUser } from \"../../redux/selectors\";\nimport Dashboard from \"./Dashboard\";\nimport { history } from \"../../redux\";\n\nexport type TSection = 'todos' | 'photos'\n\ninterface IProps {\n  section: TSection\n}\n\nconst DashboardPage = ({ section = 'todos' }: IProps) => {\n\n  const [user, loading] = useAuthState(auth);\n  const dispatch = useDispatch();\n  const userData = useSelector(selectUser)\n\n  useEffect(() => {\n    if (loading) return;\n    if (!user) return history.push('/login')\n    fetchUserData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user, loading]);  // fetchUserData doesn't change\n\n  const fetchUserData = async () => {\n    try {\n      if(!user) return\n      const userData = await getUser(user.uid)\n      if(!userData) return;\n      const { email, firstName, lastName } = userData\n      dispatch(storeUserData({ email, firstName, lastName }))\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout())\n  }\n\n  return (\n    <Dashboard\n      section={section}\n      loading={loading}\n      userData={userData}\n      fnLogout={handleLogout}\n    />\n  );\n}\n\nexport default DashboardPage;","import React from 'react'\nimport DashboardPage from '../containers/DashboardPage'\n\nconst TodosRoute = () => {\n  return <DashboardPage section='todos' />\n}\n\nexport default TodosRoute"],"sourceRoot":""}