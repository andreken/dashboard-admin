{"version":3,"sources":["redux/selectors/auth.selectors.tsx","redux/selectors/user.selectors.tsx","redux/selectors/todos.selectors.tsx","redux/selectors/photos.selectors.tsx","redux/api/auth.api.tsx","redux/api/todos.api.tsx","redux/api/photos.api.tsx","utils/hooks/useEmailValidation.tsx","utils/hooks/usePasswordValidation.tsx","components/AuthForm/LoginForm/LoginForm.tsx","components/AuthForm/LoginForm/index.tsx","components/AuthForm/RegisterForm/RegisterForm.tsx","components/AuthForm/RegisterForm/index.tsx","components/AuthForm/index.tsx","containers/AuthPage/index.tsx","routes/login.route.tsx"],"names":["selectSignInStarted","state","auth","signInStarted","selectSignInFailed","signInFailed","selectSignInErrorMessage","signInErrorMessage","selectSignUpStarted","signUpStarted","selectSignUpFailed","signUpFailed","selectSignUpErrorMessage","signUpErrorMessage","selectUser","user","selectTodosList","todos","list","selectTodosFetchStarted","fetchStarted","selectTodosFetchSuccess","fetchSuccess","selectPhotosList","photos","selectPhotosFetchStarted","selectPhotosFetchSuccess","login","email","password","dispatch","a","authActions","signIn","userActions","storeUserData","firstName","lastName","signInSuccess","message","register","signUp","signUpSuccess","logout","signOut","removeUserData","fetchTodos","limit","todosActions","axios","get","res","data","fetchFailed","fetchPhotos","photosActions","useEmailValidation","useState","validEmail","setValidEmail","errorEmail","setError","useEffect","isEmailValid","validateEmail","test","usePasswordValidation","firstPassword","secondPassword","requiredLength","lengthValidation","numberValidation","specialcharacterValidation","validLength","setValidLength","hasNumber","setHasNumber","hasSpecialChar","setSpecialChar","match","setMatch","errorPassword","_validLength","_hasNumber","_hasSpecialChar","_match","length","_errorPassword","LoginForm","showPassword","showValidation","setEmail","setPassword","setShowPassword","handleSubmit","className","Avatar","sx","width","height","LockOutlined","Typography","component","variant","onSubmit","noValidate","Grid","container","spacing","item","xs","TextField","required","fullWidth","id","name","value","onChange","e","target","error","helperText","label","autoComplete","autoFocus","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","Visibility","VisibilityOff","Button","color","disabled","Alert","severity","to","LoginFormContainer","setValidation","useDispatch","useSelector","event","preventDefault","RegisterForm","formFields","setFieldValue","confirmPassword","sm","initFormFields","RegisterFormContainer","setFormFields","fieldName","prevFormFields","AuthForm","form","useAuthState","loading","history","push","Form","AuthPage","Container","maxWidth","LoginRoute"],"mappings":"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","file":"static/js/7.e3f2a17d.chunk.js","sourcesContent":["import { TState } from \"../state\"\n\nexport const selectSignInStarted = (state: TState) => state.auth.signInStarted\nexport const selectSignInSuccess = (state: TState) => state.auth.signInSuccess\nexport const selectSignInFailed = (state: TState) => state.auth.signInFailed\nexport const selectSignInErrorMessage = (state: TState) => state.auth.signInErrorMessage\nexport const selectSignUpStarted = (state: TState) => state.auth.signUpStarted\nexport const selectSignUpSuccess = (state: TState) => state.auth.signUpSuccess\nexport const selectSignUpFailed = (state: TState) => state.auth.signUpFailed\nexport const selectSignUpErrorMessage = (state: TState) => state.auth.signUpErrorMessage","import { TState } from \"../state\"\n\nexport const selectUser = (state: TState) => state.user","import { TState } from \"../state\"\n\nexport const selectTodosList = (state: TState) => state.todos.list\nexport const selectTodosFetchStarted = (state: TState) => state.todos.fetchStarted\nexport const selectTodosFetchSuccess = (state: TState) => state.todos.fetchSuccess\nexport const selectTodosFetchFailed = (state: TState) => state.todos.fetchFailed","import { TState } from \"../state\"\n\nexport const selectPhotosList = (state: TState) => state.photos.list\nexport const selectPhotosFetchStarted = (state: TState) => state.photos.fetchStarted\nexport const selectPhotosFetchSuccess = (state: TState) => state.photos.fetchSuccess\nexport const selectPhotosFetchFailed = (state: TState) => state.photos.fetchFailed","import { Dispatch } from 'react';\nimport { signIn, signUp, signOut } from '../../database'\nimport { ValueOf } from '../../utils/helper/typesGenerics';\nimport { IStoreUserDataPayload, TActionTypes as TUserActionTypes } from '../actions/user.actionTypes';\nimport { TActionTypes as TAuthActionTypes } from '../actions/auth.actionTypes';\nimport { auth as authActions, user as userActions } from '../actions'\n\ntype IDispatchObj = {\n  type: ValueOf<TAuthActionTypes>,\n  payload?: string,\n} | {\n  type: ValueOf<TUserActionTypes>,\n  payload?: IStoreUserDataPayload,  \n}\n\nexport const login = (email: string, password: string) => async (dispatch: Dispatch<IDispatchObj>) => {\n  dispatch(authActions.signInStarted())\n  try {\n    const user: any = await signIn(email, password)\n    if(user) {\n      dispatch(userActions.storeUserData({\n        email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n      }))\n      dispatch(authActions.signInSuccess());\n    }\n  } catch (err: any) {\n    const message = err?.message\n    dispatch(authActions.signInFailed(message));\n  }\n};\n\nexport const register = (firstName: string, lastName: string, email: string, password: string) => async (dispatch: Dispatch<IDispatchObj>) => {\n  dispatch(authActions.signUpStarted())\n  try {\n    const user: any = await signUp(firstName, lastName, email, password)\n    if(user) {\n      dispatch(userActions.storeUserData({\n        email,\n        firstName,\n        lastName,\n      }))\n      dispatch(authActions.signUpSuccess());\n    }\n  } catch (err: any) {\n    const message = err?.message\n    dispatch(authActions.signUpFailed(message));\n  }\n};\n\nexport const logout = () => async (dispatch: Dispatch<IDispatchObj>) => {\n  await signOut()\n  dispatch(userActions.removeUserData())\n  dispatch(authActions.signOut())\n}","import { Dispatch } from 'react';\nimport axios from '../../utils/helper/axios'\nimport { ValueOf } from '../../utils/helper/typesGenerics';\nimport { TTodosList } from '../state'\nimport { TActionTypes } from '../actions/todos.actionTypes'\nimport { todos as todosActions } from '../actions'\n\ntype IDispatchObj = {\n  type: ValueOf<TActionTypes>,\n  payload?: TTodosList,\n}\n\nexport const fetchTodos = (limit: number = 50) => async (dispatch: Dispatch<IDispatchObj>) => {\n  dispatch(todosActions.fetchStarted())\n  try {\n    const res = await axios.get('todos?_limit='+limit)\n    const data = res.data\n    dispatch(todosActions.fetchSuccess(data))\n  } catch(e) {\n    dispatch(todosActions.fetchFailed())\n  }\n}","import { Dispatch } from 'react';\nimport axios from '../../utils/helper/axios'\nimport { ValueOf } from '../../utils/helper/typesGenerics';\nimport { TPhotosList } from '../state'\nimport { TActionTypes } from '../actions/photos.actionTypes'\nimport { photos as photosActions } from '../actions'\n\ntype IDispatchObj = {\n  type: ValueOf<TActionTypes>,\n  payload?: TPhotosList,\n}\n\nexport const fetchPhotos = (limit: number = 50) => async (dispatch: Dispatch<IDispatchObj>) => {\n  dispatch(photosActions.fetchStarted())\n  try {\n    const res = await axios.get('photos?_limit='+limit)\n    const data = res.data\n    dispatch(photosActions.fetchSuccess(data))\n  } catch(e) {\n    dispatch(photosActions.fetchFailed())\n  }\n}","import { useEffect, useState } from 'react';\r\n\r\ninterface IProps {\r\n  email: string\r\n}\r\n\r\nconst useEmailValidation = ({ email = '' }: IProps) => {\r\n\r\n  const [validEmail, setValidEmail] = useState<boolean>(false);\r\n  const [errorEmail, setError] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    const isEmailValid = validateEmail(email);\r\n    setValidEmail(isEmailValid);\r\n    setError(isEmailValid ? '' : 'Invalid email');\r\n  }, [email])\r\n\r\n  const validateEmail = (email: string) => {\r\n    if (/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email))\r\n      return true;\r\n    return false;\r\n  }\r\n\r\n  return { validEmail, errorEmail }\r\n}\r\n\r\nexport default useEmailValidation;\r\n","import { useState, useEffect } from \"react\";\r\n\r\ninterface IProps {\r\n  firstPassword: string,\r\n  secondPassword: string,\r\n  requiredLength?: number,\r\n  lengthValidation?: boolean,\r\n  numberValidation?: boolean,\r\n  lowercaseValidation?: boolean,\r\n  uppercaseValidation?: boolean,\r\n  specialcharacterValidation?: boolean,\r\n}\r\n\r\nconst usePasswordValidation = ({\r\n  firstPassword = '',\r\n  secondPassword = '',\r\n  requiredLength = 8,\r\n  lengthValidation = true,\r\n  numberValidation = false,\r\n  specialcharacterValidation = false,\r\n}: IProps) => {\r\n\r\n  const [validLength, setValidLength] = useState<boolean>(false);\r\n  const [hasNumber, setHasNumber] = useState<boolean>(false);\r\n  const [hasSpecialChar, setSpecialChar] = useState<boolean>(false);\r\n  const [match, setMatch] = useState<boolean>(false);\r\n  const [errorPassword, setError] = useState<string>('');\r\n    \r\n  useEffect(() => {\r\n\r\n    let _validLength, _hasNumber, _hasSpecialChar, _match;\r\n    _validLength = _hasNumber = _hasSpecialChar = _match = true;\r\n\r\n    if(lengthValidation){\r\n      _validLength = firstPassword.length >= requiredLength ? true : false;\r\n      setValidLength(_validLength);\r\n    }\r\n    if(numberValidation){\r\n      _hasNumber = /\\d/.test(firstPassword);\r\n      setHasNumber(_hasNumber);\r\n    }\r\n    if(specialcharacterValidation){\r\n      _hasSpecialChar = /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(firstPassword);\r\n      setSpecialChar(_hasSpecialChar);\r\n    }\r\n    _match = firstPassword !== \"\" && firstPassword === secondPassword;\r\n    setMatch(_match);\r\n\r\n    let _errorPassword = '';\r\n    if(!_validLength){\r\n      _errorPassword = `Password should be at least ${requiredLength} characters long`;\r\n    }\r\n    else if(!_hasNumber) {\r\n      _errorPassword = 'Password should contain at least one number';\r\n    }\r\n    else if(!_hasSpecialChar) {\r\n      _errorPassword = 'Password should contain at least one special character';\r\n    }\r\n    else if(!_match) {\r\n      _errorPassword = 'Password doesn\\'t match';\r\n    }\r\n    setError(_errorPassword);\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [firstPassword, secondPassword]);    // Only password fields change values after render\r\n    \r\n  return { validLength, hasNumber, hasSpecialChar, match, errorPassword };\r\n\r\n};\r\n\r\nexport default usePasswordValidation;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport {\n  Avatar, Button, \n  TextField,\n  Typography, Grid,\n  InputAdornment, IconButton, Alert\n} from '@mui/material';\nimport { LockOutlined, Visibility, VisibilityOff } from '@mui/icons-material';\n\nimport '../Form.scss';\n\ninterface IProps {\n  email: string,\n  validEmail: boolean,\n  errorEmail: string,\n  password: string,\n  showPassword: boolean,\n  errorPassword: string,\n  showValidation: boolean,\n  setEmail: (value: string) => void,\n  setPassword: (value: string) => void,\n  setShowPassword: (value: boolean) => void,\n  handleSubmit: (event: React.FormEvent) => void,\n  signInStarted: boolean,\n  signInFailed: boolean,\n  signInErrorMessage: string | null,\n}\n\nfunction LoginForm({\n  email, validEmail, errorEmail, password, showPassword, errorPassword, showValidation,\n  setEmail, setPassword, setShowPassword, handleSubmit,\n  signInStarted, signInFailed, signInErrorMessage,\n}: IProps) {\n\n  return (\n      <div className=\"access-form-wrapper form--login\">\n        <Avatar sx={{ width: 48, height: 48 }} className=\"access-form-avatar\">\n          <LockOutlined />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className=\"access-form\" onSubmit={handleSubmit} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                error={showValidation && !validEmail}\n                helperText={showValidation && errorEmail}\n                label=\"Email Address\"\n                autoComplete=\"email\"\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                error={showValidation && errorPassword !== ''}\n                helperText={showValidation && errorPassword}\n                label=\"Password\"\n                type={showPassword ? \"text\" : \"password\"}\n                autoComplete=\"current-password\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        onMouseDown={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <Visibility /> : <VisibilityOff />}\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"access-form__btn-submit\"\n            disabled={signInStarted}\n          >\n            Sign In\n          </Button>\n          <div className=\"access-form__alert-wrapper\">\n            { signInFailed && signInErrorMessage &&\n              <Alert severity=\"error\">{signInErrorMessage}</Alert>\n            }\n          </div>\n          <Link to=\"/register\">\n            Don't have an account? Sign Up\n          </Link>\n        </form>\n      </div>\n  );\n}\n\nexport default LoginForm;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { login } from '../../../redux/api';\nimport { selectSignInErrorMessage, selectSignInFailed, selectSignInStarted } from '../../../redux/selectors';\nimport useEmailValidation from '../../../utils/hooks/useEmailValidation';\nimport usePasswordValidation from '../../../utils/hooks/usePasswordValidation';\n\nimport LoginForm from './LoginForm';\n\nconst LoginFormContainer = () => {\n\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [showValidation, setValidation] = useState<boolean>(false);\n  const { validEmail, errorEmail } = useEmailValidation({ email: email });\n  const { errorPassword } = usePasswordValidation({ firstPassword: password, secondPassword: password, numberValidation: true });\n\n  const dispatch = useDispatch();\n  const signInStarted = useSelector(selectSignInStarted)\n  const signInFailed = useSelector(selectSignInFailed)\n  const signInErrorMessage = useSelector(selectSignInErrorMessage)\n\n  const isFormDataValid = (): boolean => {\n    return errorEmail === '' && errorPassword === '';\n  }\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setValidation(true);\n    if(isFormDataValid()){\n      dispatch(login(email, password))\n    }\n  }\n\n  return <LoginForm\n    email={email}\n    validEmail={validEmail}\n    errorEmail={errorEmail}\n    password={password}\n    showPassword={showPassword}\n    showValidation={showValidation}\n    errorPassword={errorPassword}\n    setEmail={setEmail}\n    setPassword={setPassword}\n    setShowPassword={setShowPassword}\n    handleSubmit={handleSubmit}\n    signInStarted={signInStarted}\n    signInFailed={signInFailed}\n    signInErrorMessage={signInErrorMessage}\n  />\n}\n\nexport default LoginFormContainer;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport {\n  Avatar, Button, \n  TextField,\n  Typography, Grid,\n  InputAdornment, IconButton, Alert\n} from '@mui/material';\nimport { LockOutlined, Visibility, VisibilityOff } from '@mui/icons-material';\n\nimport { TFormFields } from './index'\n\nimport '../Form.scss';\n\ninterface IProps {\n  formFields: TFormFields,\n  validEmail: boolean,\n  errorEmail: string,\n  showPassword: boolean,\n  errorPassword: string,\n  showValidation: boolean,\n  setFieldValue: (field: string, value: string) => void\n  setShowPassword: (value: boolean) => void,\n  handleSubmit: (event: React.FormEvent) => void,\n  signUpStarted: boolean,\n  signUpFailed: boolean,\n  signUpErrorMessage: string | null,\n}\n\nfunction RegisterForm({\n  formFields, validEmail, errorEmail, showPassword, errorPassword, showValidation,\n  setFieldValue, setShowPassword, handleSubmit,\n  signUpStarted, signUpFailed, signUpErrorMessage,\n}: IProps) {\n\n  const { firstName, lastName, email, password, confirmPassword } = formFields\n\n  return (\n      <div className=\"access-form-wrapper form--register\">\n        <Avatar sx={{ width: 48, height: 48 }} className=\"access-form-avatar\">\n          <LockOutlined />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className=\"access-form\" onSubmit={handleSubmit} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                name=\"firstName\"\n                value={firstName}\n                onChange={(e) => setFieldValue('firstName', e.target.value)}\n                error={showValidation && !firstName}\n                helperText={showValidation && !firstName && 'This field is required'}\n                label=\"First Name\"\n                autoComplete=\"fname\"\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lastName\"\n                name=\"lastName\"\n                value={lastName}\n                onChange={(e) => setFieldValue('lastName', e.target.value)}\n                error={showValidation && !lastName}\n                helperText={showValidation && !lastName && 'This field is required'}\n                label=\"Last Name\"\n                autoComplete=\"lname\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={(e) => setFieldValue('email', e.target.value)}\n                error={showValidation && !validEmail}\n                helperText={showValidation && errorEmail}\n                label=\"Email Address\"\n                autoComplete=\"email\"\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={(e) => setFieldValue('password', e.target.value)}\n                error={showValidation && errorPassword !== ''}\n                helperText={showValidation && errorPassword}\n                label=\"Password\"\n                type={showPassword ? \"text\" : \"password\"}\n                autoComplete=\"current-password\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        onMouseDown={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <Visibility /> : <VisibilityOff />}\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"password\"\n                name=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setFieldValue('confirmPassword', e.target.value)}\n                label=\"Confirm Password\"\n                type=\"password\"\n                autoComplete=\"confirm-password\"\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"access-form__btn-submit\"\n            disabled={signUpStarted}\n          >\n            Sign Up\n          </Button>\n          <div className=\"access-form__error-wrapper\">\n            { signUpFailed && signUpErrorMessage &&\n              <Alert severity=\"error\">{signUpErrorMessage}</Alert>\n            }\n          </div>\n          <Link to=\"/login\">\n            Already have an account? Sign in\n          </Link>\n        </form>\n      </div>\n  );\n}\n\nexport default RegisterForm;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { register } from '../../../redux/api';\nimport { selectSignUpFailed, selectSignUpStarted, selectSignUpErrorMessage } from '../../../redux/selectors';\nimport useEmailValidation from '../../../utils/hooks/useEmailValidation';\nimport usePasswordValidation from '../../../utils/hooks/usePasswordValidation';\n\nimport RegisterForm from './RegisterForm';\n\nconst initFormFields = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n}\n\nexport type TFormFields = typeof initFormFields\n\nconst RegisterFormContainer = () => {\n\n  const [formFields, setFormFields] = useState<TFormFields>(initFormFields);\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [showValidation, setValidation] = useState<boolean>(false);\n  const { validEmail, errorEmail } = useEmailValidation({ email: formFields.email });\n  const { errorPassword } = usePasswordValidation({ firstPassword: formFields.password, secondPassword: formFields.confirmPassword, numberValidation: true });\n\n  const dispatch = useDispatch();\n  const signUpStarted = useSelector(selectSignUpStarted)\n  const signUpFailed = useSelector(selectSignUpFailed)\n  const signUpErrorMessage = useSelector(selectSignUpErrorMessage)\n\n  const setFieldValue = (fieldName: string, value: string) => {\n    setFormFields(prevFormFields => ({\n      ...prevFormFields,\n      [fieldName]: value\n    }))\n  }\n\n  const isFormDataValid = (): boolean => {\n    return errorEmail === '' && errorPassword === '';\n  }\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setValidation(true);\n    if(isFormDataValid()){\n      const { firstName, lastName, email, password } = formFields\n      dispatch(register(firstName, lastName, email, password))\n    }\n  }\n\n  return <RegisterForm\n    formFields={formFields}\n    validEmail={validEmail}\n    errorEmail={errorEmail}\n    showPassword={showPassword}\n    showValidation={showValidation}\n    errorPassword={errorPassword}\n    setFieldValue={setFieldValue}\n    setShowPassword={setShowPassword}\n    handleSubmit={handleSubmit}\n    signUpStarted={signUpStarted}\n    signUpFailed={signUpFailed}\n    signUpErrorMessage={signUpErrorMessage}\n  />\n}\n\nexport default RegisterFormContainer;","import React, { useEffect } from 'react'\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"../../database\";\nimport { history } from '../../redux'\n\nimport { TForm } from '../../containers/AuthPage'\nimport LoginForm from './LoginForm';\nimport RegisterForm from './RegisterForm';\n\nimport './Form.scss'\n\ninterface IProps {\n  form: TForm\n}\n\nconst AuthForm = ({ form }: IProps) => {\n\n  const [user, loading, error] = useAuthState(auth);\n\n  useEffect(() => {\n    if(loading) { return }\n    if(user) history.push('/')\n  }, [user, loading, error])\n\n  const Form = form === 'login' ? LoginForm : RegisterForm;\n\n  return (\n    <Form />\n  )\n}\n\nexport default AuthForm\n","import React from 'react';\nimport { Container } from '@mui/material';\nimport AuthForm from '../../components/AuthForm';\n\nimport './AuthPage.scss';\n\nexport type TForm = 'login' | 'register'\n\ninterface IProps {\n  form: TForm\n}\n\nconst AuthPage = ({ form }: IProps) => (\n  <div className=\"auth-page\">\n    <Container className=\"auth-page-form-wrapper\" component=\"main\" maxWidth={form === 'login' ? \"xs\" : \"sm\" }>\n      <AuthForm form={form} />\n    </Container>\n  </div>\n)\n\nexport default AuthPage;\n","import React from 'react'\nimport AuthPage from '../containers/AuthPage';\n\nconst LoginRoute = () => {\n  return <AuthPage form='login' />\n}\n\nexport default LoginRoute\n"],"sourceRoot":""}